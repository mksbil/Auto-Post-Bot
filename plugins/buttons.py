from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from helper.database import db
from pyrogram.errors import ListenerTimeout
from config import Config
from helper.utils import extract_title_and_url


async def button_text(user_id):
    buttons = await db.get_buttons(user_id)
    btn = []
    text = ""
    if not buttons:
        btn.append([InlineKeyboardButton('üîò ·¥Ä·¥Ö·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥', callback_data='addbutton')])
        btn.append([InlineKeyboardButton('‚úò ·¥Ñ ü·¥ès·¥á', callback_data='close')])
        text = "‚òòÔ∏è  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä…¥ è  ô·¥ú·¥õ·¥õ·¥è…¥  è·¥á·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ '·¥Ä·¥Ö·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥'  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥s"
    
    else:
        for button in buttons:
            title, url = extract_title_and_url(button)
            btn.append([InlineKeyboardButton(f'{title}', url=f'{url}'), InlineKeyboardButton(f'·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data=f'delbutton_{buttons.index(button)}')])
            
        btn.append([InlineKeyboardButton('üîò ·¥Ä·¥Ö·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥', callback_data='addbutton')])
        btn.append([InlineKeyboardButton('‚úò ·¥Ñ ü·¥ès·¥á', callback_data='close')])
        text = "‚òòÔ∏è ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  ô·¥ú·¥õ·¥õ·¥è…¥s s ú·¥è·¥°s ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  ô·¥ú·¥õ·¥õ·¥è…¥s  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ä…¥ è  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥†…™·¥á·¥°  è·¥è·¥ú Ä  ô·¥ú·¥õ·¥õ·¥è…¥"
    return text, btn

@Client.on_message(filters.private & filters.command('my_buttons'))
async def handle_buttons(bot: Client, message: Message):
    text, btn = await button_text(user_id=message.from_user.id)
    await message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(btn))
    
    

@Client.on_callback_query(filters.regex(r'^addbutton'))
async def handle_add_button(bot: Client, query: CallbackQuery):
    
    await query.message.delete()
    chat_id = query.message.chat.id
    try:
        button = await bot.ask(chat_id=chat_id, text="**(SEND ME BUTTON)**\n\ns·¥á…¥·¥Ö ·¥ç·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥Ä·¥õ ·¥õ·¥è s·¥Ä·¥†·¥á\n“ì·¥è Ä ·¥á.…¢ - `[K-L·¥Ä…¥·¥Ö][buttonurl:https://t.me/Kdramaland]`", filters=filters.text, timeout=30)
    except ListenerTimeout:
        await query.message.reply_text(" Ä·¥á«´·¥ú·¥ás·¥õ ·¥õ…™·¥ç·¥á ·¥è·¥ú·¥õ !\n\n**‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á ·¥õ·¥Ä·¥ã…™…¥…¢ ·¥õ·¥è·¥è  ü·¥è…¥…¢ ·¥õ·¥è “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥ò·¥ès·¥õ**")
        
    title, url = extract_title_and_url(button.text)

    if title and url:
        try:
            await db.set_buttons(chat_id, button.text)
        except Exception as e:
            print(e)
        await query.message.reply_text("**·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ‚úÖ**\n\n·¥ús·¥á /my_buttons ·¥õ·¥è ·¥†…™·¥á·¥° ·¥Ä ü ü  è·¥è·¥ú Ä  ô·¥ú·¥õ·¥õ·¥è…¥", reply_to_message_id=button.id)
    else:
        await query.message.reply_text("**…™…¥·¥†·¥Ä ü…™·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä·¥ç·¥Ä·¥õ !**")

@Client.on_callback_query(filters.regex(r'^delbutton_'))
async def handle_del_button(bot: Client, query: CallbackQuery):
    
    btn_idx = query.data.split('_')[1]
    user_id = query.from_user.id

    await db.del_button(user_id, int(btn_idx))
    
    text, btn = await button_text(user_id=query.from_user.id)
    await query.message.edit(text=text, reply_markup=InlineKeyboardMarkup(btn))
